/*
MIT License

Copyright (c) 2022 groboclown

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
AsOptional(command="conditional",


#include <stdlib.h>
#include "args.h"
#include "output.h"
#include "globals.h"
#include "command_runner.h"


// An alternative to the ? command, this
// has ?0 and ?! for positive and negative use cases.
// However, ? alone handles both conditions, but with the
// need for the "noop" instruction.


WithNamedStep(enum="CONDITIONAL__YES", name="?0",
    // Runs the first argument.  If the error code
    // is zero, then it runs the second, otherwise it runs the third.

    OnCmd(
        global_cmd = COMMAND_INDEX__CONDITIONAL__TEST;
        global_arg1_i = 0;
    )
)

WithNamedStep(enum="CONDITIONAL__NO", name="?!",
    // Runs the first argument.  If the error code
    // is non-zero, then it runs the second, otherwise it runs the third.

    OnCmd(
        global_cmd = COMMAND_INDEX__CONDITIONAL__TEST;
        global_arg1_i = 1;
    )
)

WithVirtualStep(enum="CONDITIONAL__TEST",
    OnArg(
        shared_split_input_argv[2] = global_arg;
        shared_split_arg_state = args_setup_tokenizer(
            3, (char **) shared_split_input_argv,
            // Any way to force this to not parse env?
            1);
        // Note: error code is not going to be in the global_err
        tmp_val = command_runner(shared_split_arg_state);
        if (
                (tmp_val == 0 && global_arg1_i == 0)
                || (tmp_val != 0 && global_arg1_i != 0)
        ) {
            global_cmd = COMMAND_INDEX__CONDITIONAL__RUN;
            global_arg2_i = COMMAND_INDEX__CONDITIONAL__SKIP;
            global_arg3_i = COMMAND_INDEX__ERR;
        } else {
            global_cmd = COMMAND_INDEX__CONDITIONAL__SKIP;
            global_arg2_i = COMMAND_INDEX__CONDITIONAL__RUN;
            global_arg3_i = COMMAND_INDEX__ERR;
        }
    )
)

WithVirtualStep(enum="CONDITIONAL__RUN",
    // Run the step.
    // The state of the next command is determined by
    // global_arg2_i, and its follow up is global_arg3_i

    OnArg(
        shared_split_input_argv[2] = global_arg;
        shared_split_arg_state = args_setup_tokenizer(
            3, (char **) shared_split_input_argv,
            // Any way to force this to not parse env?
            1);
        global_err = command_runner(shared_split_arg_state);
        global_cmd = global_arg2_i;
        global_arg2_i = global_arg3_i;
    )

)

WithVirtualStep(enum="CONDITIONAL__SKIP",
    // Pass over this argument.
    // The state of the next command is determined by
    // global_arg2_i, and its follow up is global_arg3_i
    OnArg(
        global_cmd = global_arg2_i;
        global_arg2_i = global_arg3_i;
    )
)

)
