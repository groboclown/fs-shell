/* MIT License

Copyright (c) 2022 groboclown

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */

// This isn't a runnable command at the moment, but shows how an
// "if / then" command could work.

AsOptional(command="if",

#include "output.h"
#include "globals.h"
#include "helpers.h"

WithNamedStep(enum="if", name="if",
    // The IF statement loads up the first argument as the
    // 'test' statement.  Because it uses the shared str,
    // this command would need to be added to the `uses.h` block for that.
    // After the argument is loaded, it goes back to running this
    // command for the next argument.
    OnCmd(
        LOG(":: init if");
        global_cmd = COMMAND_INDEX__SHARED_STR;
        global_arg3_i = COMMAND_INDEX__IF
    )

    // Runs when the step encounters the "then" argument.
    // global_arg_cached contains the "test" part of the
    // command.
    OnArg(
        LOG(":: Checking if ");
        LOG(global_arg_cached);
        LOG(" succeeded\n");

        // Here you would insert your test code, like
        // does the file exist?  Is the file executable?
        // Is the file empty?  Does the given user exist?

        if (global_arg1_i) {
            // success.  Start running it like a normal command
            //   by searching for the command name.
            global_cmd = COMMAND_INDEX__FIND_CMD;
        } else {
            // failed.  Ignore the rest of the commands.
            // This requires the `noop` command to be installed.
            global_cmd = COMMAND_INDEX__NOOP;
        }

        // Note that this won't work for the "exec" command, as the
        //   standard slurping up of arguments won't be parsed the
        //   same (or will give very interesting behaviors!).

        // Instead, a special form that would cause the "then" to
        // be considered an exec statement would involve needing
        // input stream enabled.
        // In this situation, the argument parsing would redirect
        // the stream parsing to use global_arg as the pointer to
        // the current parsing.  Extra logic would need to be handled
        // to have the parsing continue after where it currently is
        // (like a linked list kind of thing).  That would require more
        // memory management and list handling, though.  If the tool
        // were to go down that path, then sub-command "( )" parsing would
        // be possible.

        LOGLN(global_arg);
    )
)

)
